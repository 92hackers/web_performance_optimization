无非了iframe嵌iframe，通过window.name或者hash，做跳板，都受到url长度的限制。

HTML5中，提供了一种postMessage的消息机制，可以在不同域的页面上，互相通过window.postMessage(datastring,’limitDomain’)的方式传递消息。在需要触发的页面注册onMessage事件，event的data属性就是传递datastring文本。再配合老道的JSON.parse就可以完美的传递json格式的对象了。可惜的是目前PostMessage只在IE8，FF和Chrome现版本提供了实现。对于老版本的IE6,7没有提供实现。

IE6,7 opener hack的方式实现跨域，据说是google的工程师率先发现的这个bug，fackbook的登陆页面就是利用了这个bug实现了postMessage的跨域。

<html>
   2: <body>
   3: <iframe id="a" src="http://www.b.com/test1.htm"></iframe>
   4: <script>
   1:  
   2: var i=document.getElementById('a');
   3: i.contentWindow.opener={
   4:     dd:function(str){
   5:         var div=document.createElement('div');
   6:         document.body.appendChild(div);
   7:         div.innerHTML=str;
   8:     }
   9: }
  10: setTimeout(function(){
  11:     opener.bb('bbbbbbb');
  12: },300)
  13:  
</script>
   5: </body>
   6: </html>

 <html>
   2: <body>
   3:  
   4: <script>
   1:  
   2:     window.opener.dd('aaaaaaaaa');
   3:     parent.opener={
   4:         bb:function(str){
   5:             var div=document.createElement('div');
   6:             document.body.appendChild(div);
   7:             div.innerHTML=str;
   8:         }
   9:     }
</script>
   5: </body>
   6:  
   7: </html>
我们可以看到，在IE6,7下，只要重置了window对象的opener为一个{}对象，在父页面设置了iframe的window.opener为一个{}之后，在iframe里面就可以通过opener调用parent的方法，在iframe重置parent.opener为一个{}对象之后，在parent就可以调用iframe的方法。

*还有一种说法是可以设置opener为function(){}，通过new opener()来调用

总结，通过IE6,7的hack，我们可以比较完美的实现postMessage在各大主流浏览器的兼容，以后跨域又多了一项利器。不过比较遗憾的事，重置opener之后，对于window.open打开的窗口，就不能很好的操作了，在IE6,7下。

但是opener 已经不能用了. 参考2011年初,微软的安全补丁.kb2497640.

你可以用个小脚本,看看你们的用户群,有多少是安装了补丁的.(前提是,IE,代码执行前，不要修改document.domain.否则会异常)

1
var w,c=document.createElement('iframe');c.src='_blank';w = document.body.appendChild(c).contentWindow;w.opener=1;w.document.open();w.document.write('<script>alert(typeof opener == "unknown")</'+'script>');w.document.close();

借助安全漏洞实现功能

使用flash的 localconnection.解决ie6,7的问题

关键字, navigator 跨域. 和opener 是异曲同工之妙

替换的方案是用window.name，刷iframe的方式，用hash传递状态便于回传，按照你最后的tips

如果是window.name的话，只要一个iframe，在aboout:blank和跨域页面之间不断刷就可以了，值保存在window.name里面，通过设置iframe页面的hash传递ajax的状态
你说的hach hack是2个iframe那种？main page套跨域iframe,iframe里面再套与mainpage同域的iframe，然后用hash透传，这种应该是最正规的没有潜在风险的吧，但是hash传递的数据大小受制于url长度，比较恼火，稍大一点数据被json.parse之后，就无法传递了。。。IE6,7下得window.name则大的多

不管是jsonp或者url get，都限制于传递字符数的最多2MB的限制

两种都限制于2MB的传递限制
jsonp请求的resource资源不会被销毁，容易mem leak
url get需要多iframe，和定时器轮训，很不方便，属于主动判断，不是被动触发，也存在定时器必然的延时，很不爽

jsonp请求的是script,这个script执行的时候，会产生全局变量或者局部变量，或者对于dom结构有关联之类，多次请求，会造成大量的垃圾变量，而这些变量如果很好的清理的话，会造成浏览器变慢，甚至在老的浏览器诸如ie6下死机等情况，如果这段script与很多dom有关联的话，甚至会mem leak，因为你jsonp无非创建新的script标签，或者改script的src，前一种在ie老版本有次数限制，而且会增多dom节点数，后一种会导致之前请求的资源不能销毁